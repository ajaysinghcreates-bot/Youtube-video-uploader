name: Instagram Reels to YouTube Shorts (SEO Optimized)

on:
  schedule:
    - cron: '0 9 * * *'   # Run daily at 9 AM UTC
  workflow_dispatch:
    inputs:
      instagram_url:
        description: 'Instagram Reel URL (optional for manual run)'
        required: false
        type: string

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg git build-essential wget
          pip install openai youtube-upload yt-dlp

      - name: Install Whisper.cpp (free transcription)
        run: |
          git clone https://github.com/ggerganov/whisper.cpp
          cd whisper.cpp
          make
          cd ..
          wget -c https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.bin -O whisper.cpp/models/ggml-small.bin

      - name: Download Instagram Reel
        run: |
          URL="${{ github.event.inputs.instagram_url }}"
          if [ -z "$URL" ]; then
            echo "‚ö†Ô∏è No Instagram URL provided. Exiting..."
            exit 1
          fi
          yt-dlp -f mp4 -o input.mp4 "$URL"

      - name: Transcribe audio with Whisper.cpp
        run: |
          ffmpeg -i input.mp4 -ar 16000 -ac 1 -f wav input.wav
          ./whisper.cpp/main -m whisper.cpp/models/ggml-small.bin -f input.wav -of transcript.txt
          cat transcript.txt

      - name: Generate SEO Title, Description, and Tags
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<EOF
          import openai, json

          with open("transcript.txt") as f:
              transcript = f.read()

          prompt = f"""
          You are an expert YouTube Shorts SEO assistant.
          Based on this transcript, generate:
          1. A catchy title (mix Hindi + English, add emojis, end with #shorts).
          2. A 200+ word engaging description (mix Hindi-English, natural, storytelling style).
          3. 30 viral tags (comma separated, short form, related to video content).

          Transcript: {transcript}
          """

          response = openai.ChatCompletion.create(
              model="gpt-4o-mini",
              messages=[{"role":"user","content":prompt}]
          )

          result = response.choices[0].message["content"]
          print("Generated SEO:", result)

          with open("seo.json","w") as f:
              json.dump(result, f)
          EOF

      - name: Upload video to YouTube
        env:
          YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
          YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
          YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
        run: |
          python - <<EOF
          import json, subprocess, re

          with open("seo.json") as f:
              seo = f.read()

          # Naive parsing (you can improve regex if needed)
          title = "üî• Funny Hindi-English Shorts üòÇ #shorts"
          description = seo
          tags = "funny,shorts,hindi,english,viral"

          cmd = [
              "youtube-upload",
              "--title", title,
              "--description", description,
              "--tags", tags,
              "--client-id=${{ secrets.YOUTUBE_CLIENT_ID }}",
              "--client-secret=${{ secrets.YOUTUBE_CLIENT_SECRET }}",
              "--credentials-file=credentials.json",
              "input.mp4"
          ]

          print("Uploading video...")
          result = subprocess.run(" ".join(cmd), shell=True, capture_output=True, text=True)
          print("Uploader output:", result.stdout, result.stderr)

          match = re.search(r"video id (.+)", result.stdout + result.stderr, re.I)
          if match:
              video_id = match.group(1).strip()
              video_url = f"https://www.youtube.com/watch?v={video_id}"
              print("‚úÖ Video uploaded successfully:", video_url)
              with open("video_link.txt","w") as f:
                  f.write(video_url)
          else:
              print("‚ö†Ô∏è Could not extract video ID. Check logs.")
          EOF

      - name: Share video link
        run: |
          echo "YouTube Shorts Link:"
          cat video_link.txt
