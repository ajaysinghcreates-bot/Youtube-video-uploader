name: Instagram Reels to YouTube Shorts (Auto Upload)

on:
  workflow_dispatch:
    inputs:
      instagram_url:
        description: 'Instagram Reel URL'
        required: true
        type: string

env:
  YOUTUBE_CLIENT_ID: ${{ secrets.YOUTUBE_CLIENT_ID }}
  YOUTUBE_CLIENT_SECRET: ${{ secrets.YOUTUBE_CLIENT_SECRET }}
  YOUTUBE_REFRESH_TOKEN: ${{ secrets.YOUTUBE_REFRESH_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          pip install --upgrade pip
          pip install --upgrade yt-dlp google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client requests ffmpeg-python
          pip install --force-reinstall "openai==1.51.0" "httpx==0.27.2"
          pip install --upgrade git+https://github.com/openai/whisper.git

      - name: Download Instagram Reel
        run: |
          mkdir -p downloads
          yt-dlp -f mp4 -o "downloads/video.mp4" "${{ github.event.inputs.instagram_url }}"

      - name: Extract audio
        run: ffmpeg -i downloads/video.mp4 -vn -acodec mp3 downloads/audio.mp3

      - name: Transcribe audio
        run: |
          python - <<EOF
          import whisper, json
          model = whisper.load_model("base")
          result = model.transcribe("downloads/audio.mp3")
          with open("downloads/transcript.json", "w", encoding="utf-8") as f:
              json.dump(result, f, ensure_ascii=False, indent=2)
          print("✅ Transcript saved")
          EOF

      - name: Generate SEO metadata
        run: |
          python - <<EOF
          import json, openai, re

          with open("downloads/transcript.json", "r", encoding="utf-8") as f:
              transcript = json.load(f)

          text = transcript.get("text", "")

          prompt = f"""
          You are a YouTube SEO expert. Based ONLY on this transcript, generate metadata for a YouTube Short.

          Transcript:
          {text}

          Rules:
          - Title: Catchy, 5-10 words, directly related to transcript
          - Description: 200-300 words, summarize transcript naturally, add 10-15 relevant hashtags
          - Tags: 15-25 related keywords, no duplicates, short phrases

          Respond in pure JSON only:
          {{
            "title": "...",
            "description": "...",
            "tags": ["...","..."]
          }}
          """

          response = openai.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}],
              max_tokens=800,
              temperature=0.7
          )

          content = response.choices[0].message.content
          match = re.search(r"\{.*\}", content, re.DOTALL)

          seo_json = {}
          if match:
              try:
                  seo_json = json.loads(match.group())
              except:
                  seo_json = {"title":"Untitled Short","description":"No description","tags":["shorts"]}
          else:
              seo_json = {"title":"Untitled Short","description":"No description","tags":["shorts"]}

          with open("downloads/seo_content.json", "w", encoding="utf-8") as f:
              json.dump(seo_json, f, indent=2)

          print("✅ SEO metadata ready")
          EOF

      - name: Upload to YouTube
        run: |
          python - <<EOF
          import os, json, google.auth.transport.requests
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build

          creds = Credentials(
              None,
              refresh_token=os.environ["YOUTUBE_REFRESH_TOKEN"],
              client_id=os.environ["YOUTUBE_CLIENT_ID"],
              client_secret=os.environ["YOUTUBE_CLIENT_SECRET"],
              token_uri="https://oauth2.googleapis.com/token"
          )

          youtube = build("youtube", "v3", credentials=creds)

          with open("downloads/seo_content.json", "r", encoding="utf-8") as f:
              seo = json.load(f)

          request = youtube.videos().insert(
              part="snippet,status",
              body={
                  "snippet": {
                      "title": seo["title"],
                      "description": seo["description"],
                      "tags": seo["tags"],
                      "categoryId": "22"  # People & Blogs
                  },
                  "status": {
                      "privacyStatus": "public",
                      "selfDeclaredMadeForKids": False
                  }
              },
              media_body="downloads/video.mp4"
          )
          response = request.execute()
          print("✅ Uploaded to YouTube:", response["id"])
          EOF
